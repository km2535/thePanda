package com.panda.thePanda.repository.keyword_info_base_name;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.panda.thePanda.entity.keyword_info_base_name.KeywordInfoCustomByNewEntity;

public interface KeywordInfoCustomByNewRepository extends JpaRepository<KeywordInfoCustomByNewEntity, String> {

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000000 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000000_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000000_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000001 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000001_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000001_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000002 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000002_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000002_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000003 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000003_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000003_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000004 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000004_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000004_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000005 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000005_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000005_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000006 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000006_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000006_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000007 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000007_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000007_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000008 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000008_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000008_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup) GROUP BY keyword UNION ALL SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000009 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000009_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000009_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get00000000NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000001 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000001_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000001_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000001NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000002 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000002_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000002_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000002NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000003 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000003_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000003_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000003NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000004 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000004_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000004_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000004NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000005 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000005_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000005_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000005NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000006 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000006_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000006_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000006NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000007 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000007_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000007_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000007NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000008 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000008_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000008_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get50000008NewKeyword();

  @Query(value = "SELECT b1.update_date, b1.keyword, b1.total_qc_cnt AS total_qc_cnt, b2.total_qc_cnt AS total_qc_cnt_previous, k.category1, k.category2, k.category3, k.category4, k.brand, k.price, k.is_season, k.total_product_count, b1.monthly_pc_qc_cnt, b1.monthly_mobile_qc_cnt, b1.comp_idx, CASE WHEN b2.backup_date IS NULL THEN 'true' WHEN TIMESTAMPDIFF(month, b2.update_date, b1.update_date) >= 1 THEN 'true' ELSE 'false' END AS new_keyword FROM keyword_info_base_50000009 k JOIN (SELECT keyword, MAX(total_qc_cnt) AS max_qc_cnt, backup_date,update_date, total_qc_cnt,monthly_pc_qc_cnt,monthly_mobile_qc_cnt,comp_idx FROM keyword_info_50000009_backup WHERE backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup) GROUP BY keyword) AS b1 ON k.keyword = b1.keyword AND b1.total_qc_cnt = b1.max_qc_cnt LEFT JOIN keyword_info_50000009_backup b2 ON b1.keyword = b2.keyword AND b2.backup_date < b1.backup_date WHERE b1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup) GROUP BY keyword ORDER BY  CASE WHEN new_keyword = 'true' THEN 0 ELSE 1 END ASC, CAST(b1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByNewEntity> get500000009NewKeyword();
}
