package com.panda.thePanda.repository.keyword_info_base_name;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.panda.thePanda.entity.keyword_info_base_name.KeywordInfoCustomByRisingEntity;

public interface KeywordInfoCustomByRisingRepository extends JpaRepository<KeywordInfoCustomByRisingEntity, String> {

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000000_backup k1 JOIN keyword_info_50000000_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000000 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_mobile_qc_cnt,k1.monthly_pc_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000001_backup k1 JOIN keyword_info_50000001_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000001 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000002_backup k1 JOIN keyword_info_50000002_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000002 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000003_backup k1 JOIN keyword_info_50000003_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000003 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000004_backup k1 JOIN keyword_info_50000004_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000004 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000005_backup k1 JOIN keyword_info_50000005_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000006 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000006_backup k1 JOIN keyword_info_50000006_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000006 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000007_backup k1 JOIN keyword_info_50000007_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000007 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000008_backup k1 JOIN keyword_info_50000008_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000008 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) UNION ALL SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000009_backup k1 JOIN keyword_info_50000009_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000009 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get00000000RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000000_backup k1 JOIN keyword_info_50000000_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000000 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000000_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000000RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000001_backup k1 JOIN keyword_info_50000001_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000001 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000001_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000001RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000002_backup k1 JOIN keyword_info_50000002_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000002 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000002_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000002RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000003_backup k1 JOIN keyword_info_50000003_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000003 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000003_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000003RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000004_backup k1 JOIN keyword_info_50000004_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000004 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000004_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000004RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000005_backup k1 JOIN keyword_info_50000005_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000005 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000005_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000005RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000006_backup k1 JOIN keyword_info_50000006_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000006 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000006_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000006RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000007_backup k1 JOIN keyword_info_50000007_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000007 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000007_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000007RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000008_backup k1 JOIN keyword_info_50000008_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000008 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000008_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000008RisingKeyword();

  @Query(value = "SELECT k1.keyword,  k1.update_date,k1.total_qc_cnt AS total_qc_cnt, k2.total_qc_cnt AS total_qc_cnt_previous, b.category1, b.category2, b.category3, b.category4, b.brand,b.price,b.is_season,b.total_product_count,k1.monthly_pc_qc_cnt,k1.monthly_mobile_qc_cnt,k1.comp_idx,  k1.total_qc_cnt - k2.total_qc_cnt AS total_qc_cnt_difference, ROUND(((k1.total_qc_cnt - k2.total_qc_cnt) / k2.total_qc_cnt) * 100 ,2) AS total_qc_cnt_difference_by_percent FROM keyword_info_50000009_backup k1 JOIN keyword_info_50000009_backup k2 ON k1.keyword = k2.keyword LEFT JOIN keyword_info_base_50000009 b ON k1.keyword = b.keyword WHERE k1.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup WHERE keyword = k1.keyword) AND k2.backup_date = (SELECT MAX(backup_date) FROM keyword_info_50000009_backup WHERE keyword = k2.keyword AND backup_date < k1.backup_date) ORDER BY CAST(total_qc_cnt_difference_by_percent AS DOUBLE) DESC, CAST(k1.total_qc_cnt AS INT) DESC LIMIT 500", nativeQuery = true)
  public List<KeywordInfoCustomByRisingEntity> get50000009RisingKeyword();

}
